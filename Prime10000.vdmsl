module Prime
/* 
Prime number generator by Sieve of Eratosthenes

To benchmark, evaluate run().
To use as a prime number generator,
setup: nat1 ==> () -- sets the max value of prime numbers to generate
next: () ==> [nat1] -- gets the next prime number if available. Otherwise, gets nil.

The MIT License (MIT)
Copyright (c) 2016 Tomohiro Oda

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
exports
    operations
        setup : nat1 ==> ();
        next : () ==> [nat1];
        run : () ==> ();
definitions
state Eratosthenes of
    space : seq of nat1
    primes : seq of nat1
init s == s = mk_Eratosthenes([], [])
end

operations
    setup : nat1 ==> ()
    setup(x) ==
        (space := [k | k in set {2, ..., x}];
        primes := []);
    
    next : () ==> [nat1]
    next() ==
        cases space:
            [x] ^ - ->
                (primes := primes ^ [x];
                sieve(x);
                return x),
            others -> return nil
            end;
    
    sieve : nat1 ==> ()
    sieve(x) ==
        space := [space(i) | i in set inds space & space(i) mod x <> 0];
    
    prime10000 : () ==> seq of nat1
    prime10000() ==
        (setup(10000);
        while next() <> nil do skip;
        return primes);
    
    run : () ==> ()
    run() == let - = prime10000() in skip;

end Prime
